AWSTemplateFormatVersion: 2010-09-09
Description: Helsingborg stad Wordpress ready instance with ubuntu.

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: Instance type to use.
  VolumeSize:
    Type: String
    Default: 50
    Description: Instance Volume size.
  DeployPublicKey:
    Type: String
    Default: ""
    Description: Instance Volume size.



Resources:
  EC2Instance:
      Type: AWS::EC2::Instance
      CreationPolicy:
        ResourceSignal:
          Timeout: PT15M
          Count: 1
      Properties:
          ImageId: ami-01996625fff6b8fcc
          KeyName: master-of-destruction
          InstanceType: !Ref InstanceType
          SecurityGroupIds:
            - !GetAtt EC2SecurityGroup.GroupId
          BlockDeviceMappings:
            -
              DeviceName: /dev/sda1
              Ebs:
                VolumeSize: !Ref VolumeSize
          UserData: 
            Fn::Base64: !Sub |
              #!/bin/bash -xe
              apt-get update -y
              apt-get install -y python-setuptools
              mkdir -p /opt/aws/bin
              wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets full_install --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      Metadata:
        AWS::CloudFormation::Init:
          configSets:
            full_install:
              - install_and_enable_cfn_hup
              - install_apache
              - config_apache
              - install_mysql
              - install_php
              - install_wp_cli
              - install_composer
              - install_redis
              - install_varnish
              - config_varnish
              - install_nginx
              - config_nginx
              - add_deploy_user
              - add_deploy_public_key
              - chmod_web_folder
          install_and_enable_cfn_hup:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=5
                mode: "000400"
                owner: root
                group: root 
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets full_install --region ${AWS::Region}
                  runas=root
              /lib/systemd/system/cfn-hup.service:
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
            commands:
              01enable_cfn_hup:
                command: |
                  systemctl enable cfn-hup.service
                  systemctl start cfn-hup.service

          install_apache:
            commands:
              01install_apache:
                test: test ! -e /etc/apache2/apache2.conf
                command: |
                  apt-get install -y apache2

          config_apache:
            files:
              /etc/apache2/ports.conf:
                content: |
                  <VirtualHost *:80>
                  ServerAdmin webmaster@localhost
                  DocumentRoot /var/www/html

                  ErrorLog ${APACHE_LOG_DIR}/error.log
                  CustomLog ${APACHE_LOG_DIR}/access.log combined

                  </VirtualHost>
                  <Directory /var/www/html>
                      Options Indexes FollowSymLinks
                      AllowOverride All
                      Require all granted
                  </Directory>

                  # vim: syntax=apache ts=4 sw=4 sts=4 sr n
              /etc/apache2/ports.conf:
                content: |
                  # If you just change the port or add more ports here, you will likely also
                  # have to change the VirtualHost statement in
                  # /etc/apache2/sites-enabled/000-default.conf

                  Listen 8080

                  <IfModule ssl_module>
                          Listen 443
                  </IfModule>

                  <IfModule mod_gnutls.c>
                          Listen 443
                  </IfModule>

                  # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
            commands:
              01enable_modules:
                command: |
                  a2enmod headers rewrite expires
              02restart_apache:
                command: |
                  systemctl restart apache2

          install_mysql:
            commands:
              01install_mysql:
                test: test ! -e /etc/mysql/my.cnf
                command: |
                  apt-get install -y mysql-server

          install_php:
            commands:
              01install_php:
                test: test ! -e //etc/php/7.2/apache2/php.ini
                command: |
                  apt-get install -y php libapache2-mod-php 
                  systemctl restart apache2
              02install_php_extensions:
                command: |
                  apt-get install -y php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip php-redis
                  systemctl restart apache2

          install_wp_cli:
            commands:
              01install_wp_cli:
                test: test ! -e /usr/local/bin/wp
                command: |
                  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  chmod +x wp-cli.phar
                  mv wp-cli.phar /usr/local/bin/wp

          install_composer:
            commands:
              01install_composer:
                test: test ! -e /usr/local/bin/composer
                command: |
                  export COMPOSER_HOME=/root
                  wget https://getcomposer.org/composer-2.phar
                  mv composer-2.phar /usr/local/bin/composer
                  chmod +x /usr/local/bin/composer

          install_redis:
            commands:
              01install_redis:
                test: test ! -e /etc/redis/redis.conf
                command: |
                  apt-get install -y redis-server
 
          install_varnish:
            commands:
              01install_varnish:
                test: test ! -e /etc/varnish/
                command: |
                  apt-get install -y varnish

          config_varnish:
            files:
              /etc/varnish/default.vcl:
                content: |
                  #
                  # VCL file for Helsingborg Stad.
                  #

                  # Marker to tell the VCL compiler that this VCL has been adapted to the
                  # new 4.0 format.

                  vcl 4.0;
                  import directors;
                  import std;

                  # Default backend definition. Set this to point to your content server.
                  backend default {
                      .host = "127.0.0.1";
                      .port = "8080";
                      .connect_timeout = 600s;
                      .first_byte_timeout = 600s;
                      .between_bytes_timeout = 600s;
                  }

                  acl purge {
                      "localhost";
                      "127.0.0.1";
                  }

                  acl upstream_proxy {
                      "127.0.0.1";
                  }

                  sub vcl_init {

                  }

                  sub vcl_recv {
                      # Let's encrypt validation.
                      if (req.url ~ "\.well\-known") {
                          return (pass);
                      }

                      # Forward user ips
                      if (req.restarts == 0) {
                          if (client.ip ~ upstream_proxy && req.http.x-forwarded-for) {
                              set req.http.X-Forwarded-For = req.http.X-Real-IP;
                          } else {
                              set req.http.X-Forwarded-For = client.ip;
                          }
                      }

                      # Skip cache of wp-json #101994
                      if (req.url ~ "^/wp-json") {
                          return (pass);
                      }

                      if (req.url ~ "^/autodiscover/autodiscover.xml") {
                          return(synth(403,"Not here."));
                      }

                      # Do purge
                      if (req.method == "PURGE") {
                          if (!client.ip ~ purge) {
                              return(synth(405,"Not allowed."));
                          }
                          ban("req.url ~ "+req.url);
                          return (purge);
                      }

                      #ONLY HANDLE HTTP METHODS
                      if (
                          req.method != "GET" &&
                          req.method != "HEAD" &&
                          req.method != "PURGE" &&
                          req.method != "PUT" &&
                          req.method != "POST" &&
                          req.method != "TRACE" &&
                          req.method != "OPTIONS" &&
                          req.method != "DELETE"
                      ) {
                          return (pass);
                      }

                      #GOOGLE URLS
                      if (req.url ~ "\?(utm_(campaign|medium|source|term)|adParams|client|cx|eid|fbid|feed|ref(id|src)?|v(er|iew))=") {
                          set req.url = regsub(req.url, "\?.*$", "");
                      }

                      # TRAILING SLASHES
                      if (req.url ~ "\?$") {
                          set req.url = regsub(req.url, "\?$", "");
                      }

                      #CACHE SEARCHPAGE AS ONE PAGE [WILL ONLY WORK WITH JS-BASED SEARCH ENGINES]
                      if (req.http.host ~ "^helsingborg\.se") {
                          if(req.url ~ "^/\?s=") {
                              set req.url = regsub(req.url, "(\?)(s)=[+%.-_A-z0-9\s]+&?", "?s=");
                          }
                      }

                      # Some generic cookie manipulation, useful for all templates that follow
                      set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");

                      # Remove the wp-settings-1 cookie
                      set req.http.Cookie = regsuball(req.http.Cookie, "wp-settings-1=[^;]+(; )?", "");

                      # Remove the wp-settings-time-1 cookie
                      set req.http.Cookie = regsuball(req.http.Cookie, "wp-settings-time-1=[^;]+(; )?", "");

                      # Remove cookie consent cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "cookie-consent=[^;]+(; )?", "");

                      # Remove any Google Analytics based cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "_gat=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");

                      # Remove other fe cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "vngage.lkvt=[^;]+(; )?", "");

                      # Remove DoubleClick offensive cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");

                      # Remove the Quant Capital cookies (added by some plugin, all __qca)
                      set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");

                      # Remove the AddThis cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");

                      # Remove other funky smelling cookies
                      set req.http.Cookie = regsuball(req.http.Cookie, "gsScrollPos.=[^;]+(; )?", "");
                      set req.http.Cookie = regsuball(req.http.Cookie, "twsessid.=[^;]+(; )?", "");

                      # Remove a ";" prefix in the cookie if present
                      set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

                      # Are there cookies left with only spaces or that are empty?
                      if (req.http.cookie ~ "^\s*$") {
                          unset req.http.cookie;
                      }

                      # Normalize Accept-Encoding header
                      if (req.http.Accept-Encoding) {
                          if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|svg)$") {
                              unset req.http.Accept-Encoding;
                          } elsif (req.http.Accept-Encoding ~ "gzip") {
                              set req.http.Accept-Encoding = "gzip";
                          } elsif (req.http.Accept-Encoding ~ "deflate") {
                              set req.http.Accept-Encoding = "deflate";
                          } else {
                              unset req.http.Accept-Encoding;
                          }
                      }

                      # Remove all cookies for static files and do not cache them
                      if (req.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
                          unset req.http.cookie;
                          set req.url = regsub(req.url, "\?.*$", "");
                          return(pass);
                      }

                      # Ignore campaign links
                      if (req.url ~ "\?(utm_(campaign|medium|source|term)|adParams|client|cx|eid|fbid|feed|ref(id|src)?|v(er|iew))=") {
                          set req.url = regsub(req.url, "\?.*$", "");
                      }

                      # Pass for login & admin pages
                      if (req.url ~ "wp-(login|admin)" || req.url ~ "preview=true" || req.url ~ "xmlrpc.php") {
                          return (pass);
                      }

                      # Send Surrogate-Capability headers to announce ESI support to backend
                      set req.http.Surrogate-Capability = "key=ESI/1.0";

                      # Cookie control
                      if (req.http.cookie) {

                          #For split testing purposes
                          if (req.http.cookie ~ "split_test") {
                              return(pipe);
                          }

                          if (req.http.cookie ~ "(wordpress_)") { #|wp-settings-
                              return(pass);
                          } else {
                              unset req.http.cookie;
                          }
                      }

                      # Authorization not cachable
                      if (req.http.Authorization) {
                          return (pass);
                      }

                  }

                  sub vcl_hash {
                      if (client.ip ~ upstream_proxy && req.http.X-Forwarded-Proto) {
                          hash_data(req.http.X-Forwarded-Proto);
                      }
                      if (req.http.X-Forwarded-Proto) {
                        hash_data(req.http.X-Forwarded-Proto);
                      }
                  }

                  sub vcl_backend_response {

                      #Do not cache wp-admin. Ever. Cache everything else
                      if ((!(bereq.url ~ "(wp-(login|admin|json)|login)"))) {
                          unset beresp.http.set-cookie;
                          set beresp.ttl = 1h;
                      }

                      # Let's cache images a year or something like that. And oh, enable ESI includes on everything else.
                      if (bereq.url ~ "\.(gif|jpg|jpeg|swf|ttf|css|js|flv|mp3|mp4|pdf|ico|png)(\?.*|)$") {
                          set beresp.ttl = 365d;
                      } else {
                          set beresp.do_esi = true;
                      }

                  }

                  sub vcl_deliver {

                      #TELL IF CACHE DELIVER
                      if (obj.hits > 0) {
                          set resp.http.X-Cache = "HIT";
                      } else {
                          set resp.http.X-Cache = "MISS";
                      }

                      #Allow cross origins
                      set resp.http.Access-Control-Allow-Origin = "*";

                      #Custom messages
                      set resp.http.Helsingborg = "Hi developer! Questions? Contact: sebastian.thulin@helsingborg.se";

                      set resp.http.X-Cache-Hits = obj.hits;

                      #Remove some headers: PHP version
                      unset resp.http.X-Powered-By;

                      #Remove some headers: Apache version & OS
                      unset resp.http.Server;
                      unset resp.http.X-Drupal-Cache;
                      unset resp.http.X-Varnish;
                      unset resp.http.Via;
                      unset resp.http.Link;
                      unset resp.http.X-Generator;

                  }

                  sub vcl_hit {

                      if (req.method == "PURGE") {
                          return(synth(200,"OK"));
                      }

                      if (obj.ttl >= 0s) {
                          return (deliver);
                      }

                      # We have no fresh fish. Lets look at the stale ones.
                      if (std.healthy(req.backend_hint)) {
                          # Backend is healthy. Limit age to 10s.
                          if (obj.ttl + 10s > 0s) {
                              #set req.http.grace = "normal(limited)";
                              return (deliver);
                          } else {
                              # No candidate for grace. Fetch a fresh object.
                              return(miss);
                          }
                      } else {
                          # backend is sick - use full grace
                          if (obj.ttl + obj.grace > 0s) {
                              #set req.http.grace = "full";
                              return (deliver);
                          } else {
                              # no graced object.
                              return (miss);
                          }
                      }

                      # fetch & deliver once we get the result
                      return (miss); # Dead code, keep as a safeguard

                  }

                  sub vcl_miss {
                      if (req.method == "PURGE") {
                          return(synth(404,"Not cached"));
                      }
                  }

                  sub vcl_synth {
                      if (resp.status == 720) {
                          # We use this special error status 720 to force redirects with 301 (permanent) redirects
                          # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://helsingborg.se"));
                          set resp.http.Location = resp.reason;
                          set resp.status = 301;
                          return (deliver);
                      } elseif (resp.status == 721) {
                          # And we use error status 721 to force redirects with a 302 (temporary) redirect
                          # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://helsingborg.se"));
                          set resp.http.Location = resp.reason;
                          set resp.status = 302;
                          return (deliver);
                      }
                      return (deliver);
                  }

                  sub vcl_fini {
                      return (ok);
                  }
            commands:
              01install_varnish:
                command: |
                  service varnish restart
          install_nginx:
            commands:
              01generate_certificate:
                test: test ! -e /etc/ssl/private/nginx-selfsigned.key
                command: |
                  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -subj "/C=SE/ST=Skane/L=Helsingborg/O=Helsingborg Stad/CN=beta.helsingborg.se"
              02install_nginx:
                test: test ! -e /etc/nginx/nginx.conf
                command: |
                  apt-get install -y nginx

          config_nginx:
            files:
              /etc/nginx/sites-available/default:
                content: |
                  server {
                      listen 443 http2 ssl;
                      listen [::]:443 http2 ssl;

                      ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                      ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
                      
                      set $upstream 127.0.0.1:6081;

                      location / {
                          proxy_pass_header Authorization;
                          proxy_pass http://$upstream;
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_http_version 1.1;
                          proxy_set_header Connection “”;
                          proxy_buffering off;
                          client_max_body_size 0;
                          proxy_read_timeout 36000s;
                          proxy_redirect off;
                      }
                  }
                  server {
                      listen 80 default_server;
                      listen [::]:80 default_server;
                      return 302 https://$host$request_uri;
                  }
            commands:
              01restart_nginx:
                command: |
                  service nginx restart

          add_deploy_user:
            commands:
              01add_user:
                test: test ! -e /home/deploy/.bashrc
                command: |
                  adduser --disabled-password --gecos "" deploy
                  adduser deploy
                  echo "deploy ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

          add_deploy_public_key:
            files:
              /home/deploy/.ssh/authorized_keys:
                content: !Sub |
                  ${DeployPublicKey}
                mode: "000600"
                owner: deploy
                group: deploy

          chmod_web_folder:
            commands:
              01chmod_web_folder: 
                command: |
                  chown www-data:www-data -R /var/www/html
                  find /var/www/html -type d -exec chmod 775 {} \;
                  find /var/www/html -type f -exec chmod 664 {} \;



  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId: vpc-21399048
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
  


  EC2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc



  EC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref EC2EIP

